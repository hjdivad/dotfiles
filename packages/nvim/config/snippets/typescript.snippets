snippet @ts-ignore
	// eslint-disable-next-line @typescript-eslint/ban-ts-comment
	// @ts-ignore

snippet @eslint-ignore
	// eslint-disable-next-line ${0:rule-name}

snippet @eslint-disable
	// eslint-disable-next-line ${0:rule-name}

snippet @af "arrow-function"
	(${1:args}) => {
		$0
	}

snippet @aaf "async arrow-function"
	async (${1:args}) => {
		$0
	}

snippet @afi "arrow-function inline"
	(${1:args}) => $0

snippet @aafi "arrow-function inline"
	async (${1:args}) => $0

snippet @docs "docs"
	/**
		${0}
	 */

snippet @forof "for of"
	for (let $1 of $2) {
		$0
	}

snippet @noop-tagged-template-literal
	export function ${0}(strings: TemplateStringsArray, ...values: any[]) {
		let result = '';
		strings.forEach((str, i) => {
			result += str + (values[i] || '');
		});
		return result;
	}

snippet @inline-str
	function inlineStr(strings: TemplateStringsArray, ...values: any[]): string {
		let result = '';

		// Step 1: Concatenate the strings and values as earlier
		for (let i = 0; i < strings.length; i++) {
			result += strings[i];
			if (i < values.length) {
				result += values[i];
			}
		}

		// Step 2: Remove leading newline, if any
		if (result.startsWith('\n')) {
			result = result.substring(1);
		}

		// Step 3: Identify the leading whitespace from the first line
		const leadingWhitespaceMatch = result.match(/^\s*/);
		const leadingWhitespace = leadingWhitespaceMatch ? leadingWhitespaceMatch[0] : '';

		// Step 4: Remove leading whitespace and trailing whitespace from all lines
		if (leadingWhitespace.length > 0 || /\s+$/.test(result)) {
			const lines = result.split('\n');
			result = lines
				.map(line =>
					line.startsWith(leadingWhitespace)
						? line.substr(leadingWhitespace.length).replace(/\s+$/, '')
						: line.replace(/\s+$/, '')
				)
				.join('\n');
		}

		return result;
	}

snippet @words
	function w(strings: TemplateStringsArray, ...values: any[]): string[] {
		// Combine the strings and values into a single string
		const rawString = strings.reduce(
			(acc, str, i) => acc + String(values[i - 1] ?? "") + str,
			"",
		);

		// Use regex to split the string on word boundaries (non-word characters)
		const wordArray = rawString.split(/\s+/).filter(Boolean);

		return wordArray;
	}

snippet @type-exhaustion-check
	const check: never = ${0}
	throw new Error(\`Types not exhausted: \${check as any}\`);

snippet @__filename
	import { fileURLToPath } from 'node:url';

	const __filename = fileURLToPath(import.meta.url);

snippet @__dirname
	import { fileURLToPath } from 'node:url';
	import path from 'node:path';

	const __filename = fileURLToPath(import.meta.url);
	const __dirname = path.dirname(__filename)
	const __basename = path.basename(__filename)

snippet @main-cli
	#!/usr/bin/env tsx

	// TODO: add package.json and use typescript-cli snippet
	// TODO: add .eslintrc.json and use typescript-cli snippet
	// TODO: npm install
	// TODO: chmod +x

	import { fileURLToPath } from 'node:url';
	import { parseArgs } from "node:util";
	import path from 'node:path';

	const __filename = fileURLToPath(import.meta.url);
	const __basename = path.basename(__filename)

	globalThis.pp = function (target: any) {
		console.log(JSON.stringify(target, null, 2));
	};


	function printHelp(code: number) {
		let out = code === 0 ? process.stdout : process.stderr;

		out.write(\`
	\${__basename} CMD [OPTS]

	Commands:
	\`);
		process.exit(code);
	}

	async function main(argv: string[]) {
		// https://nodejs.org/api/util.html#utilparseargsconfig
		let args = parseArgs({
			options: {
				help: {
					type: 'boolean',
				} ,
				foo: {
					type: 'boolean',
					short: 'f'
				} ,
				bar:{
					type:'string'
				}
			},
			args: argv.slice(2),
			allowPositionals: true,
		});
		let { values, positionals } = args;

		if (values.help) {
			printHelp(0);
		}
		${0}
	}

	if (process.argv[1] === __filename) {
		await main(process.argv);
	}

snippet @main-test
	import { fileURLToPath } from 'node:url';
	import { describe, test } from "node:test";
	import nodeAssert from "node:assert/strict";

	async function main() {
		const assert: typeof nodeAssert = nodeAssert;
		describe("exportedFn()", async () => {
			test("does something probably", async () => {
				assert.equal(2, 2);
			});
		});
		${0}
	}

	let __filename = fileURLToPath(import.meta.url);
	if (process.argv[1] === __filename) {
		await main();
	}

snippet @exec
	import { exec as execNode} from 'node:child_process';

	async function exec(
		cmd: string,
		options: ExecOptions = {},
	): Promise<{ out: string | Buffer; err: string | Buffer }> {
		return new Promise((resolve, reject) => {
			execNode(cmd, options, (error, stdout, stderr) => {
				if (error) {
					reject(error);
				}

				resolve({
					out: stdout,
					err: stderr,
				});
			});
		});
	}

snippet @spawn
	import { spawn as nativeSpawn, SpawnOptions } from "child_process";
	export const spawn = (
		command: string,
		args: string[] = [],
		options: SpawnOptions = {}
	): Promise<{ out: string; err: string; code: number | null }> => {
		return new Promise((resolve, reject) => {
			const childProcess = nativeSpawn(command, args, options);

			let stdoutData = "";
			let stderrData = "";
			let exitCode: number | null = null;

			// Collect stdout data
			childProcess.stdout?.on("data", (data) => {
				stdoutData += data;
			});

			// Collect stderr data
			childProcess.stderr?.on("data", (data) => {
				stderrData += data;
			});

			// Capture exit code
			childProcess.on("exit", (code: number | null) => {
				exitCode = code;
				resolve({ out: stdoutData, err: stderrData, code: exitCode });
			});

			childProcess.on("error", (err) => {
				reject(err);
			});
		});
	};
