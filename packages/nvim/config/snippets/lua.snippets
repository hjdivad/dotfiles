# see https://github.com/honza/vim-snippets/tree/master/snippets
# see https://github.com/L3MON4D3/LuaSnip/blob/master/DOC.md#snipmate
# see https://github.com/garbas/vim-snipmate/blob/525f331320427bf7aeb07651e2536b1f8a23df03/doc/SnipMate.txt#L310-L513

snippet __dirname "get __dirname of a script"
	local function __dirname()
		local fullpath = debug.getinfo(1,"S").source:sub(2)
		local dirname, filename = fullpath:match('^(.*/)([^/]-)$')

		return dirname, filename
	end

snippet class "create a class in lua"
	local ${1:ClassName} = {}
	${1:ClassName}.__index = ${1:ClassName}

	function ${1:ClassName}:new()
		local instance = {}
		setmetatable(instance, ${1:ClassName})
		return instance
	end

	${0}

# vim snippets

snippet opts "options with defaults"
	local opts = vim.tbl_deep_extend("force", { ${1:--[[defaults]]} }, options or {})

snippet autocmd
	vim.api.nvim_create_autocmd({ "${1:BufEnter}" }, {
		pattern = "${2:*.lua}",
		group = vim.api.nvim_create_augroup("${3:hjdivad_exrc}", { clear=true }),
		callback = function()
			${0}
		end,
	})

snippet usercmd
	vim.api.nvim_create_user_command("${1:HiUserCommand}", function()
		${0}
	end, { desc = "${2:What does it do?}" })

snippet stylua-ignore "don't format the next line"
	-- stylua: ignore

snippet local-snippets "create project local snippets setup in .nvim.lua"
	-- .nvim.lua
	-- TODO: mkdir -p .nvim/snippets && touch .nvim/snippets/${0}_local
	local ls = require("luasnip")

	require('luasnip.loaders.from_snipmate').load({paths={vim.fn.getcwd() .. "/.nvim/snippets"}})
	ls.filetype_extend("${0}", { "${0}_local" })
