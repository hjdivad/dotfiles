snippet tests "tests module for unit tests"
	#[cfg(test)]
	mod tests {
			use super::*;

			#[test]
			fn it_works() {
					assert_eq!(1, 1, "Pretty sure 1==1")
			}
	}

snippet dd "derive macro"
	#[derive($0)]

snippet derive "derive macro"
	#[derive($0)]

snippet allow "allow(clippy::) -> lint disable"
	#[allow(clippy::${0})]

snippet use:log "use logger"
  use tracing::{debug, info, trace};

snippet init:log "use logger"
  use tracing_subscriber::EnvFilter;
  // Initialize tracing, but only if RUST_LOG is set
  tracing_subscriber::fmt()
      .with_env_filter(
          EnvFilter::try_from_default_env().unwrap_or_else(|_| EnvFilter::new("off")),
      )
      .init();

snippet use:anyhow "use anyhow (result.context('foo'))"
  use anyhow::{Context, Result};

snippet cli "CLI scaffolding"
	use clap::Parser;

	#[derive(Parser, Debug)]
	#[command(version, about, long_about = None)]
	struct CommandArgs {
			#[arg(long)]
			dry_run: bool,

			/// Print debugging information
			#[arg(long)]
			debug: bool,
	}

	pub fn main() {
			let options = CommmandArgs::parse();

			if options.debug {
					println!("hello");
			}
	}
