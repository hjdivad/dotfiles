# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

# ⚠️ WARNING ⚠️
# UltiSnipsEdit will open this file even if there's a nested filetype as detected by TreeSitter (e.g. jsdoc); but the snippets that will actually expand will be those of the nested filetype
# Check :TSPlaygroundToggle ; I (show language) if snippets aren't appearing

snippet import:default "import statement"
import ${0:symbol} from '${1:path}';
endsnippet

snippet import:named "import (named) statement"
import { ${0:symbol} } from '${1:path}';
endsnippet

# TODO: fix this up to check params &c.
snippet /** "function documentation"
/**
 * ${0}
 */
endsnippet

snippet try:catch "try/catch block"
try {
	${1}
} catch (err) {
	${0}
}
endsnippet

snippet if:then "if block"
if (${1}) {
	${0}
}
endsnippet


snippet eslint:disable:next-line "eslint disable"
// eslint-disable-next-line ${1:rule}
endsnippet


snippet test:jest:describe "jest describe"
describe('${1:something}', function() {
	${0}
});
endsnippet

snippet test:jest:it "jest it"
it('${1:does something}', function() {
	${0:expect('implemented').toEqual('true');}
});
endsnippet

snippet test:jest:test "jest test"
test('${1:something probably happens}', function() {
	${0:expect('implemented').toEqual('true');}
});
endsnippet


snippet test:qunit:beforeEach "qunit beforeEach"
beforeEach(${1:async }function(${2:assert}) {
	${0}
});
endsnippet

snippet test:qunit:afterEach "qunit afterEach"
afterEach(${1:async }function(${2:assert}) {
	${0}
});
endsnippet

snippet test:qunit:module "qunit module"
module('${1:module}', function(hooks) {
	${0}
});
endsnippet

snippet test:qunit:test "qunit test"
test('${1:something probably happens}', ${2:async }function(assert) {
	${0:assert.equal('implemented', true)}
});
endsnippet




