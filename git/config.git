[alias]
  c = checkout
  backup = "!f() { local name=`git name-rev HEAD | cut -d' ' -f 2`; git branch -D \"backup/$name\" 2> /dev/null; git branch \"backup/$name\"; }; f"
	ff = merge --ff-only

  b = branch --sort=committerdate
  br = "!f() { git branch -r --sort=committerdate -l 'origin/*' --format='%(refname:lstrip=3)' | grep -v dependabot/; }; f"

  branch-current = "!f() { git branch --no-color | grep '*' | grep -v '(no branch)' | cut -c 3-; }; f"
  branch-select = "!f() { git branch | cut -c 3- | fzf | xargs git checkout; }; f"

  tags = tag -l --sort=-v:refname

  fo = fetch --prune origin
  fa = fetch --prune --all

  rr = !sh -c 'git rebase -i $(git merge-base HEAD origin/master)'
  rc = rebase --continue

  ap = add --patch
  # add --patch new file; take the next unstaged file, register with the index
  # and then add --patch
  apn = "!f() { local nf=$(git status --porcelain -uall | $GREP -P \"^\\?\" | cut -d' ' -f 2 | head -n 1); git add -N \"$nf\" 2> /dev/null; git add -p \"$nf\"; }; f"

  # commit all
  ca = "!f() { git add -A && git commit -a \"$@\"; }; f"
  # commit all amend
  cam = "!f() { git add -A && git commit -a --amend \"$@\"; }; f"
  # commit all amend leave message alone
  camm = "!f() { git add -A && git commit -a --amend -CHEAD \"$@\"; }; f"

  # amend
  cm = commit --amend
  # amend leave message alone
  cmm = commit --amend -CHEAD

  pu = push -u --force-with-lease

  h = help

  wc = whatchanged -p -w -B
  wcw = whatchanged -p -w --color-words
  wcwb = whatchanged -p -w --color-words origin/master..

  log-sans-bot =  "!f() { git log \"$@\"; }; f -P --author='^(?!dependabot-preview)'"
  log-since-last-release = "!f() { git log \"$@\" $(git tag --sort=-v:refname | head -n 1)..; }; f -P --author='^(?!dependabot-preview)'"
  lg = log-sans-bot --stat
  logb = log-sans-bot origin/master..
  lgb = log-sans-bot --no-merges --stat origin/master..

  dc = diff --cached
  dcw = diff --cached --ignore-all-space --color-words
  dw = diff --ignore-all-space --color-words

  st = status -sb -uall

  gl = log --decorate --cherry-mark --oneline --graph --boundary

  head = show -w --color-words HEAD
  count = shortlog -sn
  name-of = name-rev --name-only
  commit-show-message = show -s --format='%s%n%n%b'

[advice]
  detachedHead = false

[branch]
  # always rebase to tracked branches on pull, for branches created by
  # `git branch` or `git checkout`, i.e. non-master.
  autoSetupRebase = always
  sort = -committerdate

[core]
	editor = /usr/bin/vim

[color]
  grep = true
  branch = true
  interactive = true
  pager = true
  showbranch = true
  status = true
  ui = true

# override red colours as the gruvbox terminal defaults don't look good in dark
# mode
[color "status"]
  changed = "#d54e53"
  untracked = "#d54e53"
  nobranch = "#ff3334"
[color "diff"]
  old = "#d54e53"
[color "decorate"]
  tag = "#83a598"

[diff]
  renames = true

[fetch]
  prune = true
  pruneTags = true

[log]
  follow = true
  decorate = true

[mergetool]
  keepBackup = false

[pager]
  branch =  false

[push]
  default = upstream
  followTags = true
  recurseSubmodules = on-demand

[rebase]
  autosquash = true
  abbreviateCommands = true

[rerere]
  enabled = true
  autoUpdate = true

[tag]
  sort = -v:refname


# vim:ft=gitconfig:

