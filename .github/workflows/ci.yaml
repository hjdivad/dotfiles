# https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions
name: CI

on:
  pull_request:
  push:
    branches:
      - master
    tags:
      - '*'

jobs:

  test:
    name: test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:

      - name: Environment information
        run: |
          uname
          uname -a

      - name: Required Directories
        run: |
          mkdir -p $HOME/.cache

      - uses: actions/checkout@v2

      - name: Install fzf
        run: sudo apt-get -y install fzf

      - name: cache neovim
        uses: actions/cache@v3
        id: cache-neovim
        with:
          path: "~/.cache/neovim"
          key: ${{secrets.NEOVIM_VERSION}}

      # see https://stackoverflow.com/questions/59269850/caching-apt-packages-in-github-actions-workflow
      - name: Install Neovim
        env:
          CACHE_HIT: ${{steps.cache-neovim.outputs.cache-hit}}
          NEOVIM_VERSION: ${{secrets.NEOVIM_VERSION}}
        run: |
          if [[ "$CACHE_HIT" == 'true' ]]; then
            echo "$HOME/.cache/neovim/squashfs-root/usr/bin" >> $GITHUB_PATH
          else
            mkdir -p ~/.cache/neovim
            cd ~/.cache/neovim
            wget https://github.com/neovim/neovim/releases/download/v${NEOVIM_VERSION}/nvim.appimage
            chmod +x nvim.appimage
            ./nvim.appimage --appimage-extract
            echo "$HOME/.cache/neovim/squashfs-root/usr/bin" >> $GITHUB_PATH
          fi

      - name: Install python3
        uses: actions/setup-python@v4
        env:
          DEBUG_SSH: ${{ secrets.DEBUG_SSH }}
        if: ${{ env.DEBUG_SSH == 'true' }}
        with:
          python-version: '3.x'
            # architecture: 'x64' #defaults to x64

      - name: Install python neovim module
        env:
          DEBUG_SSH: ${{ secrets.DEBUG_SSH }}
        if: ${{ env.DEBUG_SSH == 'true' }}
        run: |
          pip3 install neovim

      - name: Setup upterm session
        env:
          DEBUG_SSH: ${{ secrets.DEBUG_SSH }}
        if: ${{ env.DEBUG_SSH == 'true' }}
        uses: lhotari/action-upterm@v1
        with:
          ## limits ssh access and adds the ssh public key for the user which triggered the workflow
          # limit-access-to-actor: true
          ## limits ssh access and adds the ssh public keys of the listed GitHub users
          limit-access-to-users: hjdivad,rwjblue

      - name: Install Dotfiles
        run: |
          # If we do a general install we have to remove $HOME/.gitconfig or
          # we'll fail to clone packer due to preferring ssh over http
          #
          # make -f Makefile.ci install
          ln -s $PWD/home/.config/nvim.symlink/ $HOME/.cache/nvim

      - name: Install Plugins
        env:
          NVIM_FLAGS: ${{ secrets.NvimFlags }}
        run: |
          make -f Makefile.ci nvim.install

      - name: test
        env:
          DEBUG: ${{ secrets.Debug }}
        run: |
          make -f makefile.ci --version
          DEBUG=${{env.DEBUG}} make -f Makefile.ci test
