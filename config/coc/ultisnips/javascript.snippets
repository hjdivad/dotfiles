snippet im "import statement"
import ${2:symbol} from '${1:path}';
endsnippet

snippet d "jest describe"
describe('${1:something}', function() {
	${0}
});
endsnippet

snippet it "jest it"
it('${1:does something}', function() {
	${0:expect('implemented').toEqual('true');}
});
endsnippet

snippet qt "qunit test"
test('${1:something probably happens}', function(assert) {
	assert.equal('implemented', true, 'test is implemented')
});
endsnippet

snippet el "eslint disable"
// eslint-disable-next-line ${1:rule}
endsnippet

snippet @p "jsdoc @param"
@param {${1:type}} ${2:paramName ([optionalName], [optional=defaultValue])} - ${0:description}
endsnippet

snippet @r "jsdoc @return"
@return {${1:type}} ${0:description}
endsnippet

# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
